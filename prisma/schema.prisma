generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  type        OrganizationType
  email       String    @unique
  logoUrl     String?
  websiteUrl  String  
  about       String 

  users       User[]
  invitations Invitation[]
  favoriteStudents User[]    @relation("FavoriteStudents")
  opportunities Opportunity[] 

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  patronymic      String
  email           String    @unique
  passwordHash    String
  avatarUrl       String?
  aboutMe         String?
  telegramLink    String?     
  vkLink          String?     

  role            Role
  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  Int?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  refreshToken    String?
  studentProfile  StudentProfile? @relation
  favoredBy       Organization[] @relation("FavoriteStudents")
}

model Invitation {
  id              Int       @id @default(autoincrement())
  email           String
  token           String    @unique
  role            Role
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  Int

  groupId         Int?      // ID группы, если указывается
  group           Group?    @relation(fields: [groupId], references: [id])

  used            Boolean   @default(false)
  expiresAt       DateTime

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model StudentProfile {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  resume        String?
  githubLink    String?
  projects      Json?

  groupId       Int?             
  group         Group?           @relation(fields: [groupId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  opportunityResponse OpportunityResponse[]
  skills          Skill[]         @relation("UserSkills")
}

model Opportunity {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  requiredSkills  Skill[]       @relation("RequiredSkills")
  organizationId  Int
  organization    Organization   @relation(fields: [organizationId], references: [id])
  responses       OpportunityResponse[] 
  createdAt       DateTime       @default(now())
  status          String         @default("active")  // active/inactive
}

model OpportunityResponse {
  id            Int            @id @default(autoincrement())
  studentId     Int
  student       StudentProfile           @relation(fields: [studentId], references: [id])
  opportunityId Int
  opportunity   Opportunity    @relation(fields: [opportunityId], references: [id])
  createdAt     DateTime       @default(now())
  coverLetter   String?       
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  description String?
  opportunities Opportunity[] @relation("RequiredSkills")
  studentProfile StudentProfile[] @relation("UserSkills")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id            Int              @id @default(autoincrement())
  name          String           @unique 
  students      StudentProfile[] 

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  Invitation Invitation[]
}


enum OrganizationType {
  COMPANY
  UNIVERSITY
}

enum Role {
  ADMIN
  UNIVERSITY_STAFF
  STAFF
  STUDENT
}
